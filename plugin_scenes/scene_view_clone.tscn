[gd_scene load_steps=2 format=3 uid="uid://dkwbx6emd8r3i"]

[sub_resource type="GDScript" id="GDScript_7gk4k"]
script/source = "@tool
extends TextureButton

# NOTE left off change node name of scene_instance not just scene view and when duplicate scenes in viewer be able to load them and reference non 2 version 
# NOTE figure out why visbileonscreennotifier is not working in @tool

@onready var res_dir = DirAccess.open(\"res://\")
@onready var user_dir = DirAccess.open(\"user://\")
@onready var label: Label = $VBoxContainer/Label
@onready var sub_viewport: SubViewport = $VBoxContainer/SubViewportContainer/SubViewport



#var active: bool = false
#var check_on_screen: bool = false
#var scene

func _ready() -> void:
	
	#set_scene_view_size(128)
	#create_folders(\"res://\", \"scenes/2d_scenes\")
	#create_folders(\"res://\", \"scenes/3d_scenes\")
	# NOTE await is used to give time for button name to be update from scene_viewer.gd to filename 
	await get_tree().create_timer(0.01).timeout
	label.set_text(self.name)
	#await get_tree().create_timer(1).timeout
	#var node_parent = find_child(\"SubViewport\", true, false)
	#print(node_parent)
	#var node = node_parent.get_child(1).get_child(0).name
	#print(node)
	#var scene_file = get_child(0).get_child(0).get_child(0).get_child(1).get_child(0)
	#print(scene_file.name)


	#var scene = self.find_child(\"SubViewport\").get_child(0)
	#var node = get_parent().get_child(1).get_child(0)
	##print(get_parent().get_child(1).get_child(0))
	#_focus_camera_on_node_3d(node)

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	pass
	#if visible_on_screen_notifier_2d.is_on_screen():
		#print(\"scene on Screen: \", self.name)
	#if check_on_screen:
		#if 
		#print(\"notifier on screen = : \", visible_on_screen_notifier_2d.is_on_screen())
		#check_on_screen = false
	#pass
	#await get_tree().create_timer(1).timeout
	#print(\"notifier on screen\", visible_on_screen_notifier_2d.is_on_screen())
	#print(\"enabler on screen\", visible_on_screen_enabler_2d.is_on_screen())
	#if active:
		#print(\"on screen now\")



# How can I implement drag and drop into the scene from my EditorPlugin? (idbrii)
# REFERENCE: https://forum.godotengine.org/t/how-can-i-implement-drag-and-drop-into-the-scene-from-my-editorplugin/3804/2
func _get_drag_data(position: Vector2) -> Variant:
	var scene = self.find_child(\"SubViewport\").get_child(0)
	var scene_path: String = scene.get_scene_file_path()
	var scene_file: String = scene.get_scene_file_path().get_file()
	#print(scene_file)
	var scene_name_split: PackedStringArray = scene_file.split(\"--\", false, 0)


	#print(\"getting dependencies\")
	#for dep in ResourceLoader.get_dependencies(scene_path):
		#print(dep)
		#print(dep.get_slice(\"::\", 0)) # Prints UID.
		#print(dep.get_slice(\"::\", 2)) # Prints path.


	if res_dir:
		# Skip reimporting if file exists # TODO add option to skip this step if user wants to overwrite existing scenes
		# TODO user defind storage location
		if res_dir.file_exists(\"res://scenes/\" + scene_name_split[0] + \".tscn\"):
			pass

		else:
			var result = res_dir.copy(scene_path, \"res://scenes/\" + scene_name_split[0] + \".tscn\")
			if result == OK:
				pass
				#print(\"File copied successfully.\")
			else:
				print(\"Failed to copy file.\")
			# Scan the filesystem to update
			var editor_filesystem = EditorInterface.get_resource_filesystem()
			editor_filesystem.scan()


	return {
		files = [\"res://scenes/\" + self.name + \".tscn\"], # something like \"res://assets/truck.tscn\"
		type = \"files\",
	}


func _can_drop_data(position, data):
	# NOTE Will need to get dependencies and copy them over to host filesystem at user://
	return true
	#print(typeof(data))
	#return typeof(data) == TYPE_DICTIONARY and data.has(\"files\")

func _drop_data(position, data):
	# NOTE Will need to get dependencies and copy them over to project filesystem at res://
	var scene = self.find_child(\"SubViewport\").get_child(0)
	var scene_path: String = scene.get_scene_file_path()
	#var scene_file: String = scene.get_scene_file_path().get_file()
	#var scene_name_split: PackedStringArray = scene_file.split(\"--\", false, 0)
	
	
	#var scene_name: String = scene.get_scene_file_path().get_file()
	#var scene_name: String = scene_name_split[0]
	
	var file_paths = data[\"files\"]
	for path in file_paths:
		print(path)
		if user_dir:
			# Skip reimporting if file exists # TODO add option to skip this step if user wants to overwrite existing scenes
			# TODO user defind storage location
			if user_dir.file_exists(scene.get_scene_file_path() + path.get_file()):
				print(\"file exists\")
				pass

			else:
				var result = user_dir.copy(path, scene.get_scene_file_path() + path.get_file())
				if result == OK:
					#pass
					print(\"File copied successfully.\")
				else:
					print(\"Failed to copy file.\")
	#var color = data[\"color\"]



#func create_folders(dir: String, scene_folder_path: String) -> void:
	#var filesystem: = DirAccess.open(dir)
	#if not filesystem.dir_exists_absolute(dir + scene_folder_path):
		#filesystem.make_dir_recursive_absolute(dir + scene_folder_path)

var min_label_size: int = 250 #was 121

func set_scene_view_size(size: float) -> void:
	#print(size)
	self.custom_minimum_size.x = size
	self.custom_minimum_size.y = size * 1.3
	sub_viewport.size = Vector2(size/1.2, size/1.2)
	if size <= min_label_size:
		self.custom_minimum_size.y = size * 0.8
		label.hide()
	else:
		self.custom_minimum_size.y = size * 1.3
		label.show()
		


# Will need to get dependencies and copy them over to filesystem 
"

[node name="SceneView" type="TextureButton"]
custom_minimum_size = Vector2(128, 167)
offset_right = 256.0
offset_bottom = 333.0
script = SubResource("GDScript_7gk4k")

[node name="VBoxContainer" type="VBoxContainer" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="SubViewportContainer" type="SubViewportContainer" parent="VBoxContainer"]
layout_mode = 2
size_flags_horizontal = 4
size_flags_vertical = 6

[node name="SubViewport" type="SubViewport" parent="VBoxContainer/SubViewportContainer"]
own_world_3d = true
transparent_bg = true
handle_input_locally = false
size = Vector2i(128, 128)
render_target_update_mode = 4

[node name="Label" type="Label" parent="VBoxContainer"]
custom_minimum_size = Vector2(10, 0)
layout_mode = 2
size_flags_vertical = 6
text = "SceneView"
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 3
